// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mocks.go -package=finalityprovider
//

// Package finalityprovider is a generated GoMock package.
package finalityprovider

import (
	context "context"
	reflect "reflect"

	types "github.com/babylonlabs-io/finality-provider/types"
	btcec "github.com/btcsuite/btcd/btcec/v2"
	types0 "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockFinalityProvider is a mock of FinalityProvider interface.
type MockFinalityProvider struct {
	ctrl     *gomock.Controller
	recorder *MockFinalityProviderMockRecorder
}

// MockFinalityProviderMockRecorder is the mock recorder for MockFinalityProvider.
type MockFinalityProviderMockRecorder struct {
	mock *MockFinalityProvider
}

// NewMockFinalityProvider creates a new mock instance.
func NewMockFinalityProvider(ctrl *gomock.Controller) *MockFinalityProvider {
	mock := &MockFinalityProvider{ctrl: ctrl}
	mock.recorder = &MockFinalityProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinalityProvider) EXPECT() *MockFinalityProviderMockRecorder {
	return m.recorder
}

// CommitPublicRandomness mocks base method.
func (m *MockFinalityProvider) CommitPublicRandomness(ctx context.Context, tipHeight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitPublicRandomness", ctx, tipHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitPublicRandomness indicates an expected call of CommitPublicRandomness.
func (mr *MockFinalityProviderMockRecorder) CommitPublicRandomness(ctx, tipHeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitPublicRandomness", reflect.TypeOf((*MockFinalityProvider)(nil).CommitPublicRandomness), ctx, tipHeight)
}

// GetPublicRandomnessList mocks base method.
func (m *MockFinalityProvider) GetPublicRandomnessList(ctx context.Context, startHeight, numPubRand uint64) ([]*btcec.FieldVal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicRandomnessList", ctx, startHeight, numPubRand)
	ret0, _ := ret[0].([]*btcec.FieldVal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicRandomnessList indicates an expected call of GetPublicRandomnessList.
func (mr *MockFinalityProviderMockRecorder) GetPublicRandomnessList(ctx, startHeight, numPubRand any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicRandomnessList", reflect.TypeOf((*MockFinalityProvider)(nil).GetPublicRandomnessList), ctx, startHeight, numPubRand)
}

// SubmitBatchFinalitySignatures mocks base method.
func (m *MockFinalityProvider) SubmitBatchFinalitySignatures(ctx context.Context, blocks []*types0.Block) (*types.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitBatchFinalitySignatures", ctx, blocks)
	ret0, _ := ret[0].(*types.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitBatchFinalitySignatures indicates an expected call of SubmitBatchFinalitySignatures.
func (mr *MockFinalityProviderMockRecorder) SubmitBatchFinalitySignatures(ctx, blocks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitBatchFinalitySignatures", reflect.TypeOf((*MockFinalityProvider)(nil).SubmitBatchFinalitySignatures), ctx, blocks)
}

// SubmitFinalitySignature mocks base method.
func (m *MockFinalityProvider) SubmitFinalitySignature(ctx context.Context, block *types0.Block) (*types.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitFinalitySignature", ctx, block)
	ret0, _ := ret[0].(*types.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitFinalitySignature indicates an expected call of SubmitFinalitySignature.
func (mr *MockFinalityProviderMockRecorder) SubmitFinalitySignature(ctx, block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitFinalitySignature", reflect.TypeOf((*MockFinalityProvider)(nil).SubmitFinalitySignature), ctx, block)
}
